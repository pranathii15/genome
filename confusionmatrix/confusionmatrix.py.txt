import pandas as pd
import numpy as np
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.multioutput import MultiOutputClassifier
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt

# Loading dataset
df = pd.read_csv("/content/CMK.hg19.AllInteractions.SP4.FDR0.001.xls", sep="\t")

# Defining features and targets
feature_columns = [
    'Feature_Start', 'Interactor_Start', 'Interactor_End', 'distance',
    'CG1_SuppPairs', 'CG2_SuppPairs', 'CC1_SuppPairs', 'CC2_SuppPairs',
    'CN1_SuppPairs', 'CN2_SuppPairs',
    'Normal', 'CarboplatinTreated', 'GemcitabineTreated'
]

target_columns = [
    'CG1_p_value', 'CG2_p_value', 'CC1_p_value',
    'CC2_p_value', 'CN1_p_value', 'CN2_p_value'
]  
   
X = df[feature_columns]
y = df[target_columns]   # Preparing the data

X = X.dropna()
y = y.loc[X.index]  # Droping rows with missing values

threshold = 0.0005
y_binary = (y <= threshold).astype(int)  # Converting p-values to binary

X_train, X_test, y_train, y_test = train_test_split(X, y_binary, test_size=0.2, random_state=42) # Spliting data

# Scaling features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Train Logistic Regression Model
model = MultiOutputClassifier(LogisticRegression(max_iter=1000, random_state=42))
model.fit(X_train_scaled, y_train)

y_pred = model.predict(X_test_scaled)

cm = confusion_matrix(y_test['CG1_p_value'], y_pred[:, 0])
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=["Not Significant", "Significant"])

disp.plot(cmap=plt.cm.Blues)
plt.title("Confusion Matrix - CG1_p_value Prediction")
plt.show()